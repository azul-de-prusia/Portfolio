{"version":3,"sources":["logo.svg","components/links.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","links","className","href","tittle","src","alt","width","height","Component","App","target","rel","type","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,6JC6B5BC,E,iLAxBX,OACA,yBAAKC,UAAU,kBACX,uBAAGA,UAAU,QAAb,gEACC,yBAAKA,UAAU,eACR,uBAAGC,KAAK,iDAAiDC,OAAO,0BAChE,yBAAKC,IAAI,uCAAuCC,IAAI,WADpD,MAGP,yBAAKJ,UAAU,WACR,uBAAGC,KAAK,wCAAwCC,OAAO,YACvD,yBAAKC,IAAI,wCAAwCC,IAAI,WADrD,MAGP,yBAAKJ,UAAU,cACR,uBAAGC,KAAK,2DAA2DC,OAAO,cAAcG,MAAM,OAAOC,OAAO,QAC5G,yBAAKH,IAAI,0CAA0CC,IAAI,WADvD,MAGP,yBAAKJ,UAAU,UACR,uBAAGC,KAAK,sDAAsDC,OAAO,SAASG,MAAM,OAAOC,OAAO,QAClG,yBAAKH,IAAI,sCAAsCC,IAAI,WADnD,W,GAnBIG,a,cCgCLC,MA5Bf,WACE,OACE,yBAAKR,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKG,IAAI,yEACT,qEAGA,kDACA,uBACEH,UAAU,WACVC,KAAK,sBACLQ,OAAO,SACPC,IAAI,yBAKR,kBAAC,IAAD,KACE,wBAAIC,KAAK,UACG,kBAAC,IAAD,CAAMC,GAAG,UAAT,yDAER,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWf,OChBxBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e2335e22.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, {Component} from 'react';\r\n\r\nclass links extends Component {\r\n    \r\nrender() {\r\n    return(\r\n    <div className=\"linkscontainer\">\r\n        <p className=\"text\">Click on the pictures to open up the project you want to see</p>\r\n         <div className='burgerqueen'> \r\n                <a href=\"https://azul-de-prusia.github.io/Burger-Queen/\" tittle=\"Burger Queen Front-End\">\r\n                <img src=\"https://i.ibb.co/PFckHhm/Captura.png\" alt=\"cipher\"/> </a>\r\n            </div>\r\n         <div className='mdlinks'> \r\n                <a href=\"https://i.ibb.co/84KVm4s/Capturas.jpg\" tittle=\"md links\">\r\n                <img src=\"https://i.ibb.co/84KVm4s/Capturas.jpg\" alt=\"cipher\"/> </a>\r\n            </div> \r\n         <div className='datalovers'> \r\n                <a href=\"https://azul-de-prusia.github.io/GDL003-data-lovers/src/\" tittle=\"data lovers\" width=\"50px\" height=\"30px\">\r\n                <img src=\"https://i.ibb.co/WWm2y43/datalovers.jpg\" alt=\"cipher\"/> </a>\r\n            </div>\r\n         <div className='cipher'> \r\n                <a href=\"https://azul-de-prusia.github.io/GDL003-cipher/src/\" tittle=\"cipher\" width=\"50px\" height=\"30px\">\r\n                <img src=\"https://i.ibb.co/mHfDgwV/cipher.jpg\" alt=\"cipher\"/> </a>\r\n            </div>\r\n    </div>\r\n    );\r\n    }\r\n};\r\n\r\nexport default links;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport links from './components/links';\nimport {BrowserRouter, Route, Link} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src=\"https://thumbs.gfycat.com/ImpossibleUniqueAfricanfisheagle-small.gif\" />\n        <p>\n          Tegthyn Coral Quiñones Gutiérrez\n        </p>\n        <p>Front-End developer</p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n        \n        </a>\n      </header>\n      <BrowserRouter>\n        <li type='circle'>\n                    <Link to=\"/links\">click here to open up the links to see some projects</Link>\n                </li>\n            <Route path=\"/links\" component={links}/>\n        </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}